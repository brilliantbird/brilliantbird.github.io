<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/07/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2023/07/14/Markdown/</url>
    <content><![CDATA[<h1 id="一、Markdown简介"><a href="#一、Markdown简介" class="headerlink" title="一、Markdown简介"></a>一、Markdown简介</h1><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
<p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
<p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
<p>Markdown 编写的文档后缀为 .md, .markdown。</p>
<p>Markdown 能被使用来撰写电子书，如：Gitbook。</p>
<p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p>
<h1 id="二、Markdown标题"><a href="#二、Markdown标题" class="headerlink" title="二、Markdown标题"></a>二、Markdown标题</h1><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。<br><strong>注意：#后面一定要跟着空格，否则语法无效！</strong></p>
<p>标题内容的后面如果也存在空格和 #，也可以构成标题，且标题的级别以前面 # 的数量为准。</p>
<p><strong>使用#号标记标题语法格式：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br><span class="line"></span><br><span class="line">### 三级标题</span><br><span class="line"></span><br><span class="line">#### 四级标题</span><br><span class="line"></span><br><span class="line">##### 五级标题</span><br><span class="line"></span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></div>
<p>显示效果：<br>[TOC]目录</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="三、Markdown段落"><a href="#三、Markdown段落" class="headerlink" title="三、Markdown段落"></a>三、Markdown段落</h1><p>Markdown的段落没有特殊的格式，直接编写文字就好，段落的换行号是使用两个以上的空格加回车。</p>
<h2 id="3-1字体"><a href="#3-1字体" class="headerlink" title="3.1字体"></a>3.1字体</h2><p>Markdown 可以使用以下几种字体：</p>
<ul>
<li>用1个星号*或底线_表示斜体</li>
<li>用2个星号*或底线_表示粗体</li>
<li>用3个星号*或底线_表示粗斜体</li>
</ul>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文字*</span><br><span class="line"></span><br><span class="line">_斜体文字_</span><br><span class="line"></span><br><span class="line">**粗体文字**</span><br><span class="line"></span><br><span class="line">__粗体文字__</span><br><span class="line"></span><br><span class="line">***粗斜体文字***</span><br><span class="line"></span><br><span class="line">___粗斜体文字___</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<p><em>斜体文字</em></p>
<p><em>斜体文字</em></p>
<p><strong>粗体文字</strong></p>
<p><strong>粗体文字</strong></p>
<p><em><strong>粗斜体文字</strong></em></p>
<p><em><strong>粗斜体文字</strong></em></p>
<h2 id="3-2分隔线"><a href="#3-2分隔线" class="headerlink" title="3.2分隔线"></a>3.2分隔线</h2><p>可以在一行中用三个以上的星号*、减号-、底线_来建立一个分隔线，行内不能有其他东西，你也可以在星号或减号蹭插入空格。下面这种写法都可以建立分隔线：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">******</span><br><span class="line">- - -</span><br><span class="line">------</span><br></pre></td></tr></table></figure></div>

<h2 id="显示效果："><a href="#显示效果：" class="headerlink" title="显示效果：**** * *******- - -"></a>显示效果：<br>***<br>* * *<br>******<br>- - -</h2><h2 id="3-3删除线"><a href="#3-3删除线" class="headerlink" title="3.3删除线"></a>3.3删除线</h2><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线~~即可。</p>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">~~要显示为要删除线的字~~</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<p><del>要显示为要删除线的字</del></p>
<h2 id="3-4下划线"><a href="#3-4下划线" class="headerlink" title="3.4下划线"></a>3.4下划线</h2><p>下划线可以通过HTML的标签来实现</p>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;u&gt;带下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<p><u>带下划线文本</u></p>
<h1 id="四、Markdown列表"><a href="#四、Markdown列表" class="headerlink" title="四、Markdown列表"></a>四、Markdown列表</h1><h2 id="4-1有序列表和无序列表"><a href="#4-1有序列表和无序列表" class="headerlink" title="4.1有序列表和无序列表"></a>4.1有序列表和无序列表</h2><p>Markdown支持有序列表和无序列表，</p>
<p>无序列表使用星号(*)、加号(+)或者减号(-)作为标记：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<p>有序列表直接在文字有加上1. 2. 3. 来表示，符号和文字之间加上一个空格字符，如：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h2 id="4-2列表嵌套"><a href="#4-2列表嵌套" class="headerlink" title="4.2列表嵌套"></a>4.2列表嵌套</h2><p>列表嵌套只需在子列表的选项前添加四个空格即可：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h1 id="五、引用"><a href="#五、引用" class="headerlink" title="五、引用"></a>五、引用</h1><p>Markdown区块引用是在段落开头使用&gt;符号，然后后面紧跟一个空格符号：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 区块引用  </span><br><span class="line">&gt; Markdown教程  </span><br><span class="line">&gt; 学的不仅是技术更是梦想</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<blockquote>
<p>区块引用<br>Markdown教程<br>学的不仅是技术更是梦想  </p>
</blockquote>
<p>另外区块是可以嵌套的，一个&gt;符号是最外层，两个符号是第一层嵌套，以此类推：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt;&gt; 第一层嵌套</span><br><span class="line">&gt;&gt;&gt; 第二层嵌套</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="5-1区块引用中使用列表"><a href="#5-1区块引用中使用列表" class="headerlink" title="5.1区块引用中使用列表"></a>5.1区块引用中使用列表</h2><p>区块中使用列表实例如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; 1. 第一项</span><br><span class="line">&gt; 2. 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<h2 id="5-2引用多个段落"><a href="#5-2引用多个段落" class="headerlink" title="5.2引用多个段落"></a>5.2引用多个段落</h2><p>引用可以包含多个段落，引用内段落和普通段落一样，不过在空行前面也要加上小于号。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 这是一个引用段落</span><br><span class="line">&gt;</span><br><span class="line">&gt; 这是另一个引用段落</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<blockquote>
<p>这是一个引用段落</p>
<p>这是另一个引用段落</p>
</blockquote>
<h1 id="六、Markdown代码块"><a href="#六、Markdown代码块" class="headerlink" title="六、Markdown代码块"></a>六、Markdown代码块</h1><h2 id="6-1行内代码"><a href="#6-1行内代码" class="headerlink" title="6.1行内代码"></a>6.1行内代码</h2><p>使用一对反引号(&#96;)来创建行内代码。如果在行内代码中需要包含反引号本身，可以使用两个反引号对加前后空格来创建。</p>
<h2 id="6-2代码块！"><a href="#6-2代码块！" class="headerlink" title="6.2代码块！"></a>6.2代码块！</h2><p>将文本的每一行缩进至少四个空格或一个制表符。这样这些文本会变成代码块。</p>
<h2 id="6-3围栏式代码块！"><a href="#6-3围栏式代码块！" class="headerlink" title="6.3围栏式代码块！"></a>6.3围栏式代码块！</h2><p>在很多 Markdown 解析器里都支持使用三个反引号(&#96;)或三个波浪号(~)来定义围栏式代码块。同时这种代码块配合插件还可以做到代码高亮、行号等高级功能。（如果在代码块中也存在三个反引号或波浪号，可以在外层使用 4 个。）</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">```javascript</span><br><span class="line">const a = 1;</span><br><span class="line">const b = 2;</span><br><span class="line">function add(num1, num2) &#123;</span><br><span class="line">  return num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(add(a, b));</span><br><span class="line">```</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(a, b));</span><br></pre></td></tr></table></figure></div>

<h1 id="七、Markdown链接"><a href="#七、Markdown链接" class="headerlink" title="七、Markdown链接"></a>七、Markdown链接</h1><h2 id="7-1链接到网站"><a href="#7-1链接到网站" class="headerlink" title="7.1链接到网站"></a>7.1链接到网站</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[茄迷的bolg](https://brilliantbird.github.io/)</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<p><a class="link"   href="https://brilliantbird.github.io/" >茄迷的bolg <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="7-2高级链接"><a href="#7-2高级链接" class="headerlink" title="7.2高级链接"></a>7.2高级链接</h2><p>链接也可以用变量来代替，文档末尾附带变量地址：<br>这个链接用1作为网址变量<a class="link"   href="http://www.baidu.com/" >baidu <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>这个链接用markdown作为网址变量<a class="link"   href="http://www.markdown.com/" >Markdown <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>然后文档的结尾为变量赋值(网址)</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1]: http://www.baidu.com</span><br><span class="line">[markdown]: http://www.markdown.com</span><br></pre></td></tr></table></figure></div>
<p>显示效果：(我在写笔记的时候加了两句，但是这里并没有没有显示出来。加了两句超链接以后，baidu和Markdown就可以变成超链接点进去了)</p>
<h1 id="八、Markdown图片"><a href="#八、Markdown图片" class="headerlink" title="八、Markdown图片"></a>八、Markdown图片</h1><p>Markdown图片语法格式为：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址)</span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>开头一个感叹号!</li>
<li>接着一个方括号，里面放上图片的代替文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的’title’属性文字。</li>
</ul>
<p>举个例子：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![帅哥照片](https://bkimg.cdn.bcebos.com/pic/b17eca8065380cd79123caf75208ba345982b2b72bde?x-bce-process=image/resize,m_lfit,h_4096,limit_1/watermark,image_d2F0ZXIvYmFpa2UyNzI=,g_7,xp_5,yp_5/format,f_auto)</span><br></pre></td></tr></table></figure></div>

<p><strong>1. 补充：带链接的图片</strong></p>
<p>下面的代码，把生成图片的代码放到了超链接的名称里面。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[![这是一个图片](/images/tutorials/markdown/工具页截图-dark.png)](/tools/)</span><br></pre></td></tr></table></figure></div>

<p><strong>2. 补充：带title的图片</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">![这是一个图片](/images/tutorials/markdown/工具页截图-dark.png &quot;这是工具页的截图&quot;)</span><br></pre></td></tr></table></figure></div>

<h1 id="九、Emoji表情"><a href="#九、Emoji表情" class="headerlink" title="九、Emoji表情"></a>九、Emoji表情</h1><p>在 Markdown 里使用 Emoji 表情有两种方法，一种是直接输入 Emoji 表情，另一种是使用 Emoji 表情短码(emoji shartcodes)。</p>
<p>Emoji 表情短码放到两个冒号(:)之间，比如： :joy:😂。</p>
<h1 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h1><p>表格使用竖线(|)区分每一列，在表格头和表格体之间第列使用至少三个减号(-)来做为分隔。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">|第一列|第二列|第三列|</span><br><span class="line">|---|---|---|</span><br><span class="line">|第一行第一列|第一行第二列|第一行第三列|</span><br><span class="line">|第二行第一列|第二行第二列|第二行第三列|</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<table>
<thead>
<tr>
<th>第一列</th>
<th>第二列</th>
<th>第三列</th>
</tr>
</thead>
<tbody><tr>
<td>第一行第一列</td>
<td>第一行第二列</td>
<td>第一行第三列</td>
</tr>
<tr>
<td>第二行第一列</td>
<td>第二行第二列</td>
<td>第二行第三列</td>
</tr>
</tbody></table>
<p><strong>补充：设置表格的对齐方式</strong></p>
<p>下列代码，在第二行的每一列都添加了冒号(:)，左侧添加一个冒号表示该列左对齐，右侧添加一个冒号表示该列右对齐，左右各添加一个冒号表示该列居中对齐。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">|第一列|第二列|第三列|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|这一列是左对齐的|这一列是居中对齐的|这一列是右对齐的|</span><br></pre></td></tr></table></figure></div>

<p>显示效果：</p>
<table>
<thead>
<tr>
<th align="left">第一列</th>
<th align="center">第二列</th>
<th align="right">第三列</th>
</tr>
</thead>
<tbody><tr>
<td align="left">这一列是左对齐的</td>
<td align="center">这一列是居中对齐的</td>
<td align="right">这一列是右对齐的</td>
</tr>
</tbody></table>
<p>在表格中可以使用斜体单行元素，比如粗体斜体、行内代码、超链接、图片、Emoji表情、HTML等。</p>
<p>关于图表，公式，脚注，注释，内嵌HTML和React的相关内容未完待续！！！</p>
]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>判断语句</title>
    <url>/2023/07/15/%E5%88%A4%E6%96%AD%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="一、bool类型和比较运算符"><a href="#一、bool类型和比较运算符" class="headerlink" title="一、bool类型和比较运算符"></a>一、bool类型和比较运算符</h1><p>bool类型的本质还是数字类型，True的底层就是1，False底层就是0。</p>
<p>bool类型的数据不仅可以通过定义得到，也可以通过比较运算符（&#x3D;&#x3D;、&gt;、&lt;、!&#x3D;、&gt;&#x3D;、&lt;&#x3D;）进行内容比较得到。  </p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">bool_1 = Ture</span><br><span class="line">bool_2 = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">bool_3 = <span class="number">5</span>&gt;<span class="number">3</span></span><br><span class="line">bool_4 = <span class="number">1</span>&gt;<span class="number">6</span></span><br><span class="line">bool_5 = <span class="number">1</span> ==<span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<h1 id="二、if语句的基本格式"><a href="#二、if语句的基本格式" class="headerlink" title="二、if语句的基本格式"></a>二、if语句的基本格式</h1><h2 id="2-1-if基本格式"><a href="#2-1-if基本格式" class="headerlink" title="2.1 if基本格式"></a>2.1 if基本格式</h2><p>语法格式：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 要判断的条件：</span><br><span class="line">    条件成立时要执行的语句</span><br></pre></td></tr></table></figure></div>
<p>细节：  </p>
<ul>
<li>冒号别少了</li>
<li>与c语言用大括号来判断归属关系不同的是Python是通过空格缩进来判断归属关系的！（四个空格缩进）</li>
<li>判断语句的结果必须是bool类型的True和False</li>
</ul>
<h2 id="2-2-if-else语句"><a href="#2-2-if-else语句" class="headerlink" title="2.2 if else语句"></a>2.2 if else语句</h2><p>语法格式：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">if 条件:</span><br><span class="line">    条件成立时要执行的语句</span><br><span class="line">else:</span><br><span class="line">    不满足的时候执行的语句</span><br></pre></td></tr></table></figure></div>

<p>注意 ：</p>
<ul>
<li>else不需要判断条件</li>
<li>else同样需要四个空格进行缩进</li>
</ul>
<h2 id="2-3-if-elif-else语句进行多条件判断的语法"><a href="#2-3-if-elif-else语句进行多条件判断的语法" class="headerlink" title="2.3 if elif else语句进行多条件判断的语法"></a>2.3 if elif else语句进行<strong>多条件判断</strong>的语法</h2><p>语法格式：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>：</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span>：</span><br><span class="line">    ......</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></div>

<p><strong>可以实现多条件判断！！！先判断条件1满足不满足，然后再依次判断条件2，条件3……如果全部不满足就执行else</strong></p>
<p>注意：</p>
<ul>
<li>判断是互斥且<strong>有顺序的</strong></li>
<li>满足其中一个条件，执行完相关的语句以后就会跳出这个层次的if语句。</li>
<li>else可以不写</li>
<li>空格缩进同样不可省略</li>
</ul>
<p>举个例子：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">num == <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请猜一个数字： &quot;</span>)) == num：</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜对了&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;猜错了，再猜一个数字： &quot;</span>)) == num：</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜对了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> ：</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;猜错了&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>这个例子告诉我们，if elif else是按顺序从上往下一个个执行的，其次可以在if的条件里面去写input函数，这样子代码更加简洁。别忘了把输入的数据转换成int类型后再进行比较！</p>
<h2 id="2-4判断语句的嵌套"><a href="#2-4判断语句的嵌套" class="headerlink" title="2.4判断语句的嵌套"></a>2.4判断语句的嵌套</h2><p>由于许多的逻辑的判断是嵌套的，多层次的。对于这种需求，我们可以自由组合if elif else ，完成特定需求的要求。</p>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">    …………</span><br><span class="line">    <span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">        …………</span><br><span class="line">        …………</span><br></pre></td></tr></table></figure></div>
<p>可以看到，只有条件1满足以后才会去判断条件2是否满足。<br>嵌套的关键在于<strong>空格缩进！！！</strong><br>还是记住：通过空格缩进来决定语句之间的：<strong>层次关系</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>循环结构</title>
    <url>/2023/07/15/%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><h2 id="1-1while循环的基础使用"><a href="#1-1while循环的基础使用" class="headerlink" title="1.1while循环的基础使用"></a>1.1while循环的基础使用</h2><p>语法格式：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件：</span><br><span class="line">    条件满足时执行的语句……</span><br></pre></td></tr></table></figure></div>
<p><strong>只要条件（可以是bool或者比较运算）满足，就会无限循环执行</strong></p>
<h2 id="1-2while的嵌套循环"><a href="#1-2while的嵌套循环" class="headerlink" title="1.2while的嵌套循环"></a>1.2while的嵌套循环</h2><p>和if的嵌套几乎一模一样，只需要把if的嵌套中的if改成while就是while的嵌套循环了。</p>
<p><strong>注意：此处的嵌套循环同样是基于空格缩进来决定层次关系。</strong></p>
<hr>
<p>补充内容：</p>
<ol>
<li>默认print语句输出内容会自动换行，所以有时候也会用print语句输出空内容来实现换行。（与c语言不同）</li>
</ol>
<p>如果想要使用print语句，输出不换行的功能的话，需要这么写：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;World&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<ol start="2">
<li>制表符\t<br>效果等同于tab键，可以让多行字符串进行对齐。</li>
</ol>
<h2 id="示例：如此输出以后，上下俩行的上下两个字符串就会对齐！"><a href="#示例：如此输出以后，上下俩行的上下两个字符串就会对齐！" class="headerlink" title="示例：如此输出以后，上下俩行的上下两个字符串就会对齐！"></a>示例：<br><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;Hello\tWorld&quot;)</span><br><span class="line">print(&quot;qiemi\t666&quot;)</span><br></pre></td></tr></table></figure></div><br>如此输出以后，上下俩行的上下两个字符串就会对齐！</h2><h2 id="2-1-for循环基础语法"><a href="#2-1-for循环基础语法" class="headerlink" title="2.1 for循环基础语法"></a>2.1 for循环基础语法</h2><p>与while循环的区别：</p>
<ul>
<li>while循环的循环条件是自定义的，<strong>自行控制循环条件</strong></li>
<li>for循环是一种<strong>“轮询”</strong>机制，是对一批内容进行“逐个处理”</li>
</ul>
<p>语法格式：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列):</span><br><span class="line">    循环满足条件时执行的代码</span><br></pre></td></tr></table></figure></div>

<ul>
<li>in是一个关键字</li>
<li>执行逻辑是从待处理数据集中的数据逐个取出，每个循环就将当前输出赋予这个临时变量，然后执行循环体内的代码。</li>
</ul>
<p>举个例子：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;cheming&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>for循环是无法定义循环条件的，只呢从数据集里面依次取出内容进行处理，理论上来说Python的for循环无法构建无限循环。</p>
</li>
<li><p>同样有空格缩进</p>
</li>
</ul>
<h2 id="2-2-range语句"><a href="#2-2-range语句" class="headerlink" title="2.2 range语句"></a>2.2 range语句</h2><p>待处理数据集的严格说法叫做：序列类型。<br>序列类型指：内容可以一个个依次取出的一种类型。包括：</p>
<ul>
<li>字符串</li>
<li>列表</li>
<li>元组</li>
<li>等</li>
</ul>
<p>因此for循环语句，本质上是遍历：序列类型。</p>
<p>学习range语句，获得一个简单的数字序列：</p>
<p>语法1：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(num)</span><br></pre></td></tr></table></figure></div>
<p>可以获取一个从0开始，到num结束的数字序列（不含num本身）</p>
<p>比如range（5）取得的数据是： [0,1,2,3,4,]</p>
<p>语法2：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(num1,num2)</span><br></pre></td></tr></table></figure></div>
<p>获得一个从num1开始，到num2结束的数字序列（不包含num2本身）</p>
<p>语法3：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(num1,num2,step)</span><br></pre></td></tr></table></figure></div>

<p>获得一个从num1开始，到num2结束的数字序列（不包含num2本身），并且数字之间的步长以step为准。（step默认是1）</p>
<p>大多数的range序列都是配合for循环使用的</p>
<h2 id="2-3-变量作用域"><a href="#2-3-变量作用域" class="headerlink" title="2.3 变量作用域"></a>2.3 变量作用域</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure></div>
<p>这样子的写法：</p>
<ul>
<li>规范上：不允许</li>
<li>实际上：允许</li>
</ul>
<p>for循环创建的临时变量的作用范围只在for循环的内部， <strong>也就是作用域就在循环体内</strong>，不应该在for循环外部生效（不是不可能）。实际上是可以访问到的，但是在编程的规范上是不允许、不建议这么做。可以在for循环之前就定义好i。</p>
<h2 id="2-4-for循环的嵌套"><a href="#2-4-for循环的嵌套" class="headerlink" title="2.4 for循环的嵌套"></a>2.4 for循环的嵌套</h2><p>语法格式和while嵌套循环一样的。</p>
<p>关键点就是注意好<strong>空格缩进</strong>就行了</p>
<h1 id="3-break和continue关键字"><a href="#3-break和continue关键字" class="headerlink" title="3. break和continue关键字"></a>3. break和continue关键字</h1><p><strong>这两个关键字的用法和c语言中一样</strong></p>
<p>continue：中断本次循环，直接进入下一次循环。可用于for和while循环，效果一致。</p>
<p>注意：</p>
<ul>
<li>如果是在嵌套循环中，continue只能在它所在的循环临时中断。也就是只会中断内部循环，而不会中断外部循环。</li>
</ul>
<p>break： 直接结束循环，可用于for和while循环，效果一致。<br>注意：</p>
<ul>
<li>在嵌套循环中的用法与continue一样。</li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>格式化的精确控制 &amp; 数据输入（input语句）</title>
    <url>/2023/07/14/%E6%A0%BC%E5%BC%8F%E5%8C%96%E7%9A%84%E7%B2%BE%E7%A1%AE%E6%8E%A7%E5%88%B6%20&amp;%20%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5%EF%BC%88input%E8%AF%AD%E5%8F%A5%EF%BC%89/</url>
    <content><![CDATA[<h1 id="格式化的精度控制"><a href="#格式化的精度控制" class="headerlink" title="格式化的精度控制"></a>格式化的精度控制</h1><p>使用m.n控制数据的宽度和精度。<br>m，控制宽度，要求是数字（很少用），如果设置的宽度小于数字自身，不生效。<br>.n，控制小数点精度，要求是数字，<strong>会进行小数的四舍五入，数据会失真</strong></p>
<h2 id="字符串快速格式化"><a href="#字符串快速格式化" class="headerlink" title="字符串快速格式化"></a>字符串快速格式化</h2><p>语法：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">f&quot;内容&#123;变量&#125;&quot;</span><br></pre></td></tr></table></figure></div>

<p> 此时的变量不限制数据类型，不会进行进度控制，会原样输出。这里的大括号就是占位符。</p>
<p>比如：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;qiemi&quot;</span></span><br><span class="line">age = <span class="number">18</span></span><br><span class="line">printf(<span class="string">f&quot;我是<span class="subst">&#123;name&#125;</span>,我今年<span class="subst">&#123;age&#125;</span>岁了&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>特点：</p>
<ol>
<li><p>不理会类型（类似于c++的cout）</p>
</li>
<li><p>不做精度控制（适合对精度没有要求的时候快速使用）</p>
</li>
</ol>
<h2 id="对表达式格式化"><a href="#对表达式格式化" class="headerlink" title="对表达式格式化"></a>对表达式格式化</h2><p>首先，什么是表达式？</p>
<p>表达式：一条具有<strong>明确执行结果</strong>的<strong>代码语句</strong>。<br>比如“</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1+1</span><br><span class="line">2*2</span><br><span class="line">name = &quot;qiemi&quot;</span><br><span class="line">age = 19</span><br></pre></td></tr></table></figure></div>


<p>表达式的格式化：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1+1的结果是： %d&quot;</span> %(<span class="number">1</span>+<span class="number">1</span>)) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;9*9的结果是： <span class="subst">&#123;<span class="number">9</span>*<span class="number">9</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;字符串在Python里面的的类型是 ：%s&quot;</span> % <span class="built_in">type</span>(<span class="string">&#x27;字符串&#x27;</span>))</span><br></pre></td></tr></table></figure></div>

<p>适合在不需要变量进行数据存储的时候，可以直接格式化表达式，简化代码。</p>
<h1 id="数据输入（input语句）"><a href="#数据输入（input语句）" class="headerlink" title="数据输入（input语句）"></a>数据输入（input语句）</h1><p>语法：<br>使用一个变量接收（存储）input语句获取的键盘输入数据即可</p>
<p>比如：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请输入你的名字&quot;</span>)</span><br><span class="line">name = <span class="built_in">input</span>();</span><br></pre></td></tr></table></figure></div>
<p>上述例子的print其实是多余的，因为input语句自身就可以输出提示内容。所以可以进行简化：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="built_in">input</span>(<span class="string">&quot;请输入你的名字&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>！！！input语句不管你写入的是什么数据，默认统统当做字符串看待！！！所以记得进行对应的数据类型转换</strong></p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
